<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>
    <style>
        /* Using Inter font as a base, common with Tailwind */
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f3f4f6; /* gray-100 */
            padding: 1rem;
        }
        #qrcodeContainer {
            width: 256px; /* Default QR code size */
            height: 256px;
            margin: 20px auto;
            border: 1px solid #e5e7eb; /* gray-200 */
            display: flex; /* For centering placeholder */
            justify-content: center;
            align-items: center;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        #qrcodeContainer img { /* Style for the image generated by qrcode.js */
            display: block;
            margin: auto;
        }
        .control-item {
            margin-bottom: 1rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151; /* gray-700 */
        }
        input[type="text"] {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db; /* gray-300 */
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        input[type="text"]:focus {
            border-color: #3b82f6; /* blue-500 */
            outline: none;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }
        button {
            padding: 0.75rem 1.5rem;
            background-color: #3b82f6; /* blue-500 */
            color: white;
            border: none;
            border-radius: 0.375rem; /* rounded-md */
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s ease-in-out;
            width: 100%; /* Make buttons full width */
        }
        button:hover {
            background-color: #2563eb; /* blue-600 */
        }
        button:disabled {
            background-color: #9ca3af; /* gray-400 */
            cursor: not-allowed;
        }
        .button-secondary {
            background-color: #10b981; /* green-500 */
        }
        .button-secondary:hover {
            background-color: #059669; /* green-600 */
        }
        #statusMessage {
            margin-top: 1rem;
            padding: 0.75rem;
            border-radius: 0.375rem;
            text-align: center;
            min-height: 20px;
            font-size: 0.875rem; /* text-sm */
        }
        .status-success { background-color: #d1fae5; color: #065f46; } /* green-100 text-green-800 */
        .status-error   { background-color: #fee2e2; color: #991b1b; } /* red-100 text-red-800 */

    </style>
</head>
<body>
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-xl w-full max-w-md">
        <header class="mb-6 text-center">
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">QR Code Generator</h1>
            <p class="text-gray-600 mt-1 text-sm sm:text-base">Enter text or a URL to generate a QR code.</p>
        </header>

        <main>
            <div class="control-item">
                <label for="qrData">Text or URL:</label>
                <input type="text" id="qrData" placeholder="e.g., https://www.google.com">
            </div>

            <div class="control-item">
                <button id="generateBtn">Generate QR Code</button>
            </div>

            <div id="qrcodeContainer">
                <span class="text-gray-400 text-sm">QR Code will appear here</span>
            </div>
            
            <div class="control-item mt-4">
                <button id="downloadBtn" class="button-secondary" disabled>Download QR Code (PNG)</button>
            </div>

            <div id="statusMessage"></div>
        </main>
    </div>

    <script>
        // DOM Element References
        const qrDataInput = document.getElementById('qrData');
        const generateBtn = document.getElementById('generateBtn');
        const qrcodeContainer = document.getElementById('qrcodeContainer');
        const downloadBtn = document.getElementById('downloadBtn');
        const statusMessage = document.getElementById('statusMessage');
        
        let qrCodeInstance = null; // To hold the QRCode.js instance

        /**
         * Displays a status message to the user.
         * @param {string} message - The message to display.
         * @param {'success' | 'error'} type - The type of message.
         */
        function showStatus(message, type = 'success') {
            statusMessage.textContent = message;
            statusMessage.className = 'text-sm '; // Reset classes
            if (type === 'success') {
                statusMessage.classList.add('status-success');
            } else if (type === 'error') {
                statusMessage.classList.add('status-error');
            }
             // Clear message after 3 seconds
            setTimeout(() => {
                if (statusMessage.textContent === message) { // Only clear if it's the same message
                    statusMessage.textContent = '';
                    statusMessage.className = 'text-sm ';
                }
            }, 3000);
        }

        /**
         * Generates the QR code.
         */
        function generateQRCode() {
            const data = qrDataInput.value.trim();
            if (!data) {
                showStatus('Please enter some text or a URL.', 'error');
                // Optionally clear the QR code if input is empty
                qrcodeContainer.innerHTML = '<span class="text-gray-400 text-sm">QR Code will appear here</span>';
                downloadBtn.disabled = true;
                return;
            }

            // Clear previous QR code
            qrcodeContainer.innerHTML = ''; 

            try {
                // Create new QR Code instance
                // The library appends an img or canvas to the container
                qrCodeInstance = new QRCode(qrcodeContainer, {
                    text: data,
                    width: 256,
                    height: 256,
                    colorDark: "#000000",
                    colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.H // High correction level
                });
                downloadBtn.disabled = false;
                showStatus('QR Code generated successfully!', 'success');
            } catch (error) {
                console.error("QR Code generation error:", error);
                showStatus('Failed to generate QR Code. Check console.', 'error');
                qrcodeContainer.innerHTML = '<span class="text-red-500 text-sm">Error generating QR Code</span>';
                downloadBtn.disabled = true;
            }
        }

        /**
         * Handles the download of the QR code.
         * It finds the `img` tag generated by qrcode.js and converts its src to a downloadable link.
         */
        function downloadQRCode() {
            if (!qrCodeInstance || !qrcodeContainer.querySelector('img')) {
                showStatus('No QR code available to download.', 'error');
                return;
            }

            const qrImage = qrcodeContainer.querySelector('img');
            const qrCanvas = qrcodeContainer.querySelector('canvas'); // qrcode.js might use canvas

            let dataUrl;

            if (qrImage && qrImage.src) {
                dataUrl = qrImage.src; // If it's an img, src is already a data URL or points to one
            } else if (qrCanvas) {
                dataUrl = qrCanvas.toDataURL('image/png');
            } else {
                 showStatus('Could not find QR code image element.', 'error');
                 return;
            }
            
            const link = document.createElement('a');
            link.href = dataUrl;
            link.download = 'qrcode.png';
            document.body.appendChild(link); // Required for Firefox
            link.click();
            document.body.removeChild(link); // Clean up
            showStatus('QR Code download started.', 'success');
        }

        // Event Listeners
        generateBtn.addEventListener('click', generateQRCode);
        downloadBtn.addEventListener('click', downloadQRCode);

        // Allow Enter key to generate QR code from input field
        qrDataInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent form submission if it were in a form
                generateQRCode();
            }
        });

    </script>
</body>
</html>
